<?php

namespace Knevelina\AdventOfCode\Data\Year2023\Day07;

use RuntimeException;
use WeakMap;

class JokerHand extends Hand
{

    protected static function parseCards(string $cards): array
    {
        return parent::parseCards(str_replace('J', '*', $cards));
    }

    public static function fromDescription(string $description): static
    {
        return parent::fromDescription($description); // TODO: Change the autogenerated stub
    }

    protected static function determineType(array $cards): Type
    {
        /** @var array<string, int> $cardMap */
        $cardMap = [];

        foreach ($cards as $card) {
            $cardMap[$card->value] = ($cardMap[$card->value] ?? 0) + 1;
        }

        if (!isset($cardMap['*'])) {
            return Hand::determineType($cards);
        }

        $counts = $cardMap;
        rsort($counts);

        $mvpCard = array_search($counts[0], $cardMap);

        if ($mvpCard !== Card::JOKER->value) {
            $cards = array_map(function (Card $card) use ($mvpCard): Card {
                if ($card->value === $mvpCard) {
                    return Card::JOKER;
                }

                return $card;
            }, $cards);
            return Hand::determineType($cards);
        }

        $type = match ($counts) {
            [5] => Type::FIVE_OF_A_KIND,
            [4, 1] => Type::FOUR_OF_A_KIND,
            [3, 2] => Type::FULL_HOUSE,
            [3, 1, 1] => Type::THREE_OF_A_KIND,
            [2, 2, 1] => Type::TWO_PAIR,
            [2, 1, 1, 1] => Type::ONE_PAIR,
            [1, 1, 1, 1, 1] => Type::HIGH_CARD,
            default => throw new RuntimeException(sprintf('Invalid sorted card arrangement %s', implode(', ', $cardMap))),
        };
        return $type;
    }
}